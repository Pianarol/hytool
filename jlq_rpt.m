function jlq_rpt( p, t, q, d, ttle )%JLQ_RPT - Produces the final figure and results for the Jacob and Lohman (1952) model %                % Syntax: jlq_rpt( p, t, q, d, ttle )%%   p = parameters of the model%   p(1) = b  = slope of the late time straight line ( b= 0.183 / (T s0) )%   p(2) = t0 = intercept with the horizontal axis for s = 0%   t = measured time%   q = measured discharge%   d(1) = s0 = constant drawdown%   d(2) = rw  = radius of the well screen%   ttle = Title of the figure %% Description:%   Produces the final figure and results for the Jacob and Lohman%   (1952) model.%% See also: jlq_dmo, jlq_dim, jlq_gss%clfif(nargin==4) % Default value for d if not given by user  ttle='Constant head test';end% Rename the parameters for a more intuitive check of the formulasb=p(1); t0=p(2);s0=d(1); r=d(2);% Compute the transmissivity, storativity and radius of influenceT=log(10)./4./pi./s0./b;S=4*exp(-psi(1)).*T*t0/r.^2;Ri=2*sqrt(T*t(end)/S);% Calls an internal script that computes drawdown, derivative, and residualsfunc='jlq'; s=q; rpt_cmp; % Defines the text of the left side of the legend lgdl=char('Test data:');lgdl=char(lgdl, sprintf(' Imposed drawdown: %0.2g m',s0));lgdl=char(lgdl, sprintf(' Well radius: %0.2g m',r));lgdl=char(lgdl, ' ');lgdl=char(lgdl, 'Hydraulic parameters:');lgdl=char(lgdl, sprintf(' Transmissivity T: %3.1e m^2/s',T));lgdl=char(lgdl, sprintf(' Storativity S: %3.1e',S));% Defines the text of the right side of the legend lgdr=char('Jacob and Lohman (1952) Model');lgdr=char(lgdr, ' ');lgdr=char(lgdr, 'Fitting parameters:');lgdr=char(lgdr, sprintf(' slope a: %0.2g m',b));lgdr=char(lgdr, sprintf(' intercept t0: %0.2g s',t0));lgdr=char(lgdr, sprintf(' mean residual: %0.2g m^3/s',mr));lgdr=char(lgdr, sprintf(' 2 standard deviation: %0.2g m^3/s',sr));% Calls an internal script that place the legendrpt_lgd% Calls an internal script that plot the model and the data% Internal script used for the ***_rpt functions.% It plots the data and the model in semi log scale for slug tests.% Selects the area for the plot and define a coordinate systemxo=0.1; yo=0.5;dy=0.4; dx=0.8;hax=axes('position',[xo,yo,dx,dy]);% Plots the data and model in bi-logarithmic scalesemilogx(t,s,'o',tc,sc,'-')% Defines the extension of the plotymin=min( [s;sc'] )*0.9;ymax=max([s;sc'])*1.1;warning('off', 'all')axis([t(1) t(end) ymin ymax])warning('on', 'all')% Write the legendlegend('Discharge','Model','Location','NorthEast')xlabel('Time in seconds')ylabel('Discharge in m^3/s')% Add a title to the graphtitle(ttle)