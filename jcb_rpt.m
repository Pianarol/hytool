function jcb_rpt( p, t, s, d, ttle )%JCB_RPT - Reports graphically the results of a pumping test interpreted with the Cooper-Jacob (1946) model. %                        % Syntax: jcb_rpt( p, t, s, d, ttle )%%   p = parameters of the model%   p(1) = a  = slope of the straight line%   p(2) = t0 = intercept with the horizontal axis for s = 0%   t = measured time%   s = measured drawdown%   d(1) = q = Pumping rate%   d(2) = r = distance from the pumping well %   ttle = Title of the figure %% Description:%   Produces the report of an intepretation made with the Cooper and Jacob%   (1946) solution. %% See also: jcb_dmo, jcb_dim, jcb_gssif(nargin==4) % Default value for the title if not given by the user  ttle=' ';end% Rename the parameters for a more intuitive check of the formulasa=p(1); t0=p(2); q=d(1); r=d(2); % Compute the transmissivity, storativity and radius of influenceT=0.1832339.*q./a;S=2.2458394.*T*t0/r.^2;Ri=2*sqrt(T*t(end)/S);% Calls an internal script that computes drawdown, derivative, and residualsfunc='jcb'; rpt_cmp% Defines the text of the left side of the legend lgdl=char('Test data:');lgdl=char(lgdl, sprintf(' Discharge rate: %3.2e m^3/s',q));lgdl=char(lgdl, sprintf(' Radial distance: %0.2g m',r));lgdl=char(lgdl, ' ');lgdl=char(lgdl, 'Hydraulic parameters:');lgdl=char(lgdl, sprintf(' Transmissivity T: %3.1e m^2/s',T));lgdl=char(lgdl, sprintf(' Storativity S: %3.1e',S));lgdl=char(lgdl, sprintf(' Radius of Investigation Ri: %0.2g m',Ri));% Defines the text of the right side of the legend lgdr=char('Cooper-Jacob (1945) Model');lgdr=char(lgdr, ' ');lgdr=char(lgdr, 'Fitting parameters:');lgdr=char(lgdr, sprintf(' slope a: %0.2g m',a));lgdr=char(lgdr, sprintf(' intercept t0: %0.2g m',t0));lgdr=char(lgdr, sprintf(' mean residual: %0.2g m',mr));lgdr=char(lgdr, sprintf(' 2 standard deviation: %0.2g m',sr));% Calls an internal script that place the legendrpt_lgd% Calls an internal script that plot the model and the datarpt_plt% Change the vertical axis to arithmeticset(hax,'YScale','linear')set(hax,'YLim',[0,ymax])